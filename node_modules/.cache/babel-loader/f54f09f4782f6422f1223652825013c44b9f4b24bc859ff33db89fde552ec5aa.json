{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tron softTech\\\\Task01\\\\task01\\\\src\\\\Components\\\\Fetching.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   CardContent,\n//   Card,\n//   Grid,\n//   TextField,\n//   InputAdornment,\n//   IconButton,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Typography,\n//   Box,\n//   Button,\n//   Select,\n//   MenuItem,\n//   Snackbar,\n//   Alert,\n// } from \"@mui/material\";\n// import { Search, Add, Remove, Delete } from \"@mui/icons-material\";\n// import axios from \"axios\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n// import { createTheme, ThemeProvider } from \"@mui/material/styles\";\n// import { styled } from \"@mui/system\";\n\n// // Define theme\n// const theme = createTheme({\n//   palette: {\n//     primary: {\n//       main: \"#1976d2\",\n//     },\n//     secondary: {\n//       main: \"#ff5722\",\n//     },\n//     error: {\n//       main: \"#f44336\",\n//     },\n//   },\n//   typography: {\n//     fontFamily: \"Roboto, sans-serif\",\n//     h3: {\n//       fontWeight: 700,\n//     },\n//     subtitle1: {\n//       fontWeight: 500,\n//     },\n//   },\n// });\n\n// // Styled component for animation\n// const AnimatedCard = styled(Card)({\n//   height: \"200px\",\n//   backgroundColor: \"#f2f2f2\",\n//   transition: \"transform 0.3s, box-shadow 0.3s\",\n//   \"&:hover\": {\n//     transform: \"scale(1.05)\",\n//     boxShadow: \"0 8px 16px rgba(0,0,0,0.3)\",\n//   },\n// });\n\n// export const Fetching = () => {\n//   const [data, setData] = useState([]);\n//   console.log(data, \"mmmmmmmmmm\");\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [selectedItems, setSelectedItems] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState(\"All\");\n\n//   // Snackbar states\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\n//   const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n//   const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\n\n//   // Fetch data from the API\n//   const getData = async () => {\n//     try {\n//       const result = await axios.get(\n//         \"http://localhost:8090/api/product/getAllProducts\"\n//       );\n//       setData(result.data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//       setSnackbarMessage(\"Failed to load data.\");\n//       setSnackbarSeverity(\"error\");\n//       setOpenSnackbar(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   // Handle change in search input\n//   const handleSearchChange = (event) => {\n//     setSearchQuery(event.target.value);\n//   };\n\n//   // Handle change in category\n//   const handleCategoryChange = (event) => {\n//     setSelectedCategory(event.target.value);\n//   };\n\n//   // Handle product click\n//   const handleProductClick = (item) => {\n//     setSelectedItems((prevItems) => {\n//       const existingItem = prevItems.find((i) => i.id === item.id);\n//       if (existingItem) {\n//         return prevItems.map((i) =>\n//           i.id === item.id ? { ...i, quantity: i.quantity + 1 } : i\n//         );\n//       } else {\n//         return [...prevItems, { ...item, quantity: 1 }];\n//       }\n//     });\n//   };\n\n//   // Handle quantity change\n//   const handleQuantityChange = (itemId, change) => {\n//     setSelectedItems((prevItems) =>\n//       prevItems.map((item) =>\n//         item.id === itemId\n//           ? { ...item, quantity: Math.max(item.quantity + change, 1) }\n//           : item\n//       )\n//     );\n//   };\n\n//   // Handle delete\n//   const handleDelete = (itemId) => {\n//     setSelectedItems((prevItems) =>\n//       prevItems.filter((item) => item.id !== itemId)\n//     );\n//   };\n\n//   // Handle place order\n//   const handlePlaceOrder = () => {\n//     setSnackbarMessage(\"Order placed successfully!\");\n//     setSnackbarSeverity(\"success\");\n//     setOpenSnackbar(true);\n//     setSelectedItems([]);\n//   };\n\n//   // Handle cancel order\n//   const handleCancelOrder = () => {\n//     setSnackbarMessage(\"Order canceled.\");\n//     setSnackbarSeverity(\"error\");\n//     setOpenSnackbar(true);\n//     setSelectedItems([]);\n//   };\n\n//   // Get unique categories\n//   const categories = [\n//     \"All\",\n//     ...new Set(data.map((item) => item.category || \"Unknown\")),\n//   ];\n\n//   // Filter data based on search query and selected category\n//   const filteredData = data.filter(\n//     (item) =>\n//       (item.category?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//         \"\") &&\n//       (selectedCategory === \"All\" || item.category === selectedCategory)\n//   );\n\n//   // Calculate totals\n//   const total = selectedItems.reduce(\n//     (sum, item) => sum + item.price * item.quantity,\n//     0\n//   );\n//   const tax = total * 0.1; // 10% tax\n//   const discount = total * 0.05; // 5% discount\n//   const grossTotal = total + tax - discount;\n\n//   // Close Snackbar\n//   const handleCloseSnackbar = () => {\n//     setOpenSnackbar(false);\n//   };\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Grid container spacing={3} sx={{ padding: \"20px\" }}>\n//         <Grid item xs={6}>\n//           <Grid container spacing={2}>\n//             <Grid item xs={6}>\n//               <TextField\n//                 label=\"Search by category\"\n//                 variant=\"outlined\"\n//                 value={searchQuery}\n//                 onChange={handleSearchChange}\n//                 sx={{\n//                   marginBottom: \"20px\",\n//                   width: \"100%\",\n//                   \"& .MuiOutlinedInput-root\": {\n//                     borderRadius: \"20px\",\n//                   },\n//                 }}\n//                 InputProps={{\n//                   endAdornment: (\n//                     <InputAdornment position=\"end\">\n//                       <Search />\n//                     </InputAdornment>\n//                   ),\n//                 }}\n//               />\n//             </Grid>\n//             <Grid item xs={6}>\n//               <Select\n//                 label=\"Category\"\n//                 value={selectedCategory}\n//                 onChange={handleCategoryChange}\n//                 sx={{\n//                   marginBottom: \"20px\",\n//                   width: \"100%\",\n//                   \"& .MuiSelect-root\": {\n//                     borderRadius: \"20px\",\n//                   },\n//                   \"& fieldset\": {\n//                     borderRadius: \"20px\", // Ensures the outline of the Select component is also rounded\n//                   },\n//                 }}\n//               >\n//                 {categories.map((category) => (\n//                   <MenuItem key={category} value={category}>\n//                     {category}\n//                   </MenuItem>\n//                 ))}\n//               </Select>\n//             </Grid>\n//           </Grid>\n\n//           <Box\n//             sx={{\n//               maxHeight: \"400px\",\n//               overflowY: \"auto\",\n//               paddingRight: \"10px\", // To prevent scroll bar overlap\n//             }}\n//           >\n//             <Grid container spacing={2}>\n//               {filteredData.length > 0 ? (\n//                 filteredData.map((item) => (\n//                   <Grid item xs={3} key={item.id}>\n//                     <AnimatedCard onClick={() => handleProductClick(item)}>\n//                       <CardContent>\n//                         <img\n//                           src={item.productImage}\n//                           alt={item.createdOn}\n//                           height={100}\n//                           width={100}\n//                           style={{ marginBottom: \"10px\" }}\n//                         />\n//                         <Typography variant=\"h7\" gutterBottom>\n//                           {item.productName.toUpperCase()}\n//                         </Typography>\n//                         <Typography\n//                           variant=\"h6\"\n//                           color=\"primary\"\n//                           sx={{ position: \"relative\", top: \"-4px\" }}\n//                         >\n//                           ${item.productPrice}/-\n//                         </Typography>\n//                       </CardContent>\n//                     </AnimatedCard>\n//                   </Grid>\n//                 ))\n//               ) : (\n//                 <Typography variant=\"body1\" color=\"textSecondary\">\n//                   No products available.\n//                 </Typography>\n//               )}\n//             </Grid>\n//           </Box>\n//         </Grid>\n\n//         {/* Selected Items Display Grid */}\n//         <Grid item xs={6}>\n//           <Typography variant=\"h4\" gutterBottom>\n//             Billing....\n//           </Typography>\n//           <Box\n//             sx={{\n//               maxHeight: \"300px\",\n//               overflowY: \"auto\",\n//               paddingRight: \"10px\", // To prevent scroll bar overlap\n//             }}\n//           >\n//             {selectedItems.length > 0 ? (\n//               <TableContainer component={Paper}>\n//                 <Table>\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell\n//                         sx={{\n//                           backgroundColor: \"primary.main\",\n//                           color: \"#fff\",\n//                         }}\n//                       >\n//                         Product Name\n//                       </TableCell>\n//                       <TableCell\n//                         sx={{\n//                           backgroundColor: \"primary.main\",\n//                           color: \"#fff\",\n//                         }}\n//                       >\n//                         Price\n//                       </TableCell>\n//                       <TableCell\n//                         sx={{\n//                           backgroundColor: \"primary.main\",\n//                           color: \"#fff\",\n//                         }}\n//                       >\n//                         Quantity\n//                       </TableCell>\n//                       <TableCell\n//                         sx={{\n//                           backgroundColor: \"primary.main\",\n//                           color: \"#fff\",\n//                         }}\n//                       >\n//                         Actions\n//                       </TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                     {selectedItems.map((item) => (\n//                       <TableRow\n//                         key={item.id}\n//                         sx={{\n//                           transition: \"background-color 0.3s\",\n//                           \"&:hover\": { backgroundColor: \"#f5f5f5\" },\n//                         }}\n//                       >\n//                         <TableCell>{item.title.slice(0, 20)}</TableCell>\n//                         <TableCell>${item.price.toFixed(2)}</TableCell>\n//                         <TableCell>\n//                           <IconButton\n//                             onClick={() => handleQuantityChange(item.id, -1)}\n//                           >\n//                             <Remove />\n//                           </IconButton>\n//                           <span>{item.quantity}</span>\n//                           <IconButton\n//                             onClick={() => handleQuantityChange(item.id, 1)}\n//                           >\n//                             <Add />\n//                           </IconButton>\n//                         </TableCell>\n//                         <TableCell>\n//                           <IconButton onClick={() => handleDelete(item.id)}>\n//                             <Delete style={{ color: \"#ff1a1a\" }} />\n//                           </IconButton>\n//                         </TableCell>\n//                       </TableRow>\n//                     ))}\n//                   </TableBody>\n//                 </Table>\n//               </TableContainer>\n//             ) : (\n//               <Typography variant=\"body1\" color=\"textSecondary\">\n//                 No products selected.\n//               </Typography>\n//             )}\n//           </Box>\n//           {/* Totals Card */}\n//           <Card\n//             sx={{\n//               marginTop: \"20px\",\n//               padding: \"10px\",\n//               backgroundColor: \"#f8f9fa\",\n//             }}\n//           >\n//             <CardContent>\n//               <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\n//                 <Typography variant=\"subtitle1\">\n//                   Total: ${total.toFixed(2)}\n//                 </Typography>\n//                 <Typography variant=\"subtitle1\">\n//                   Tax (10%): ${tax.toFixed(2)}\n//                 </Typography>\n//                 <Typography variant=\"subtitle1\">\n//                   Discount (5%): -${discount.toFixed(2)}\n//                 </Typography>\n//                 <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n//                   Gross Total: ₹{grossTotal.toFixed(2)}/-\n//                 </Typography>\n//               </Box>\n//             </CardContent>\n//           </Card>\n//           <Box display=\"flex\" justifyContent=\"center\" marginTop=\"10px\">\n//             <Button\n//               onClick={handlePlaceOrder}\n//               variant=\"contained\"\n//               color=\"primary\"\n//               sx={{ margin: \"5px\" }}\n//             >\n//               Place Order\n//             </Button>\n//             <Button\n//               onClick={handleCancelOrder}\n//               variant=\"contained\"\n//               color=\"error\"\n//               sx={{ margin: \"5px\" }}\n//             >\n//               Cancel Order\n//             </Button>\n//           </Box>\n//         </Grid>\n//       </Grid>\n\n//       {/* Snackbar for alerts */}\n//       <Snackbar\n//         open={openSnackbar}\n//         autoHideDuration={6000}\n//         onClose={handleCloseSnackbar}\n//         action={\n//           <IconButton\n//             size=\"small\"\n//             aria-label=\"close\"\n//             color=\"inherit\"\n//             onClick={handleCloseSnackbar}\n//           >\n//             <CloseIcon />\n//           </IconButton>\n//         }\n//       >\n//         <Alert\n//           onClose={handleCloseSnackbar}\n//           severity={snackbarSeverity}\n//           sx={{ width: \"100%\" }}\n//         >\n//           {snackbarMessage}\n//         </Alert>\n//       </Snackbar>\n//     </ThemeProvider>\n//   );\n// };\n\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Fetching = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const getData = async () => {\n    const result = await axios.get(\"\");\n    setData(result.data);\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: data.map(item => {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 458,\n    columnNumber: 5\n  }, this);\n};\n_s(Fetching, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Fetching;\nvar _c;\n$RefreshReg$(_c, \"Fetching\");","map":{"version":3,"names":["React","useEffect","useState","Grid","jsxDEV","_jsxDEV","Fetching","_s","data","setData","getData","result","axios","get","container","spacing","children","map","item","xs","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Tron softTech/Task01/task01/src/Components/Fetching.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   CardContent,\r\n//   Card,\r\n//   Grid,\r\n//   TextField,\r\n//   InputAdornment,\r\n//   IconButton,\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableContainer,\r\n//   TableHead,\r\n//   TableRow,\r\n//   Paper,\r\n//   Typography,\r\n//   Box,\r\n//   Button,\r\n//   Select,\r\n//   MenuItem,\r\n//   Snackbar,\r\n//   Alert,\r\n// } from \"@mui/material\";\r\n// import { Search, Add, Remove, Delete } from \"@mui/icons-material\";\r\n// import axios from \"axios\";\r\n// import CloseIcon from \"@mui/icons-material/Close\";\r\n// import { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n// import { styled } from \"@mui/system\";\r\n\r\n// // Define theme\r\n// const theme = createTheme({\r\n//   palette: {\r\n//     primary: {\r\n//       main: \"#1976d2\",\r\n//     },\r\n//     secondary: {\r\n//       main: \"#ff5722\",\r\n//     },\r\n//     error: {\r\n//       main: \"#f44336\",\r\n//     },\r\n//   },\r\n//   typography: {\r\n//     fontFamily: \"Roboto, sans-serif\",\r\n//     h3: {\r\n//       fontWeight: 700,\r\n//     },\r\n//     subtitle1: {\r\n//       fontWeight: 500,\r\n//     },\r\n//   },\r\n// });\r\n\r\n// // Styled component for animation\r\n// const AnimatedCard = styled(Card)({\r\n//   height: \"200px\",\r\n//   backgroundColor: \"#f2f2f2\",\r\n//   transition: \"transform 0.3s, box-shadow 0.3s\",\r\n//   \"&:hover\": {\r\n//     transform: \"scale(1.05)\",\r\n//     boxShadow: \"0 8px 16px rgba(0,0,0,0.3)\",\r\n//   },\r\n// });\r\n\r\n// export const Fetching = () => {\r\n//   const [data, setData] = useState([]);\r\n//   console.log(data, \"mmmmmmmmmm\");\r\n\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [selectedItems, setSelectedItems] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState(\"All\");\r\n\r\n//   // Snackbar states\r\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\r\n//   const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n//   const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\r\n\r\n//   // Fetch data from the API\r\n//   const getData = async () => {\r\n//     try {\r\n//       const result = await axios.get(\r\n//         \"http://localhost:8090/api/product/getAllProducts\"\r\n//       );\r\n//       setData(result.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching data:\", error);\r\n//       setSnackbarMessage(\"Failed to load data.\");\r\n//       setSnackbarSeverity(\"error\");\r\n//       setOpenSnackbar(true);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   // Handle change in search input\r\n//   const handleSearchChange = (event) => {\r\n//     setSearchQuery(event.target.value);\r\n//   };\r\n\r\n//   // Handle change in category\r\n//   const handleCategoryChange = (event) => {\r\n//     setSelectedCategory(event.target.value);\r\n//   };\r\n\r\n//   // Handle product click\r\n//   const handleProductClick = (item) => {\r\n//     setSelectedItems((prevItems) => {\r\n//       const existingItem = prevItems.find((i) => i.id === item.id);\r\n//       if (existingItem) {\r\n//         return prevItems.map((i) =>\r\n//           i.id === item.id ? { ...i, quantity: i.quantity + 1 } : i\r\n//         );\r\n//       } else {\r\n//         return [...prevItems, { ...item, quantity: 1 }];\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   // Handle quantity change\r\n//   const handleQuantityChange = (itemId, change) => {\r\n//     setSelectedItems((prevItems) =>\r\n//       prevItems.map((item) =>\r\n//         item.id === itemId\r\n//           ? { ...item, quantity: Math.max(item.quantity + change, 1) }\r\n//           : item\r\n//       )\r\n//     );\r\n//   };\r\n\r\n//   // Handle delete\r\n//   const handleDelete = (itemId) => {\r\n//     setSelectedItems((prevItems) =>\r\n//       prevItems.filter((item) => item.id !== itemId)\r\n//     );\r\n//   };\r\n\r\n//   // Handle place order\r\n//   const handlePlaceOrder = () => {\r\n//     setSnackbarMessage(\"Order placed successfully!\");\r\n//     setSnackbarSeverity(\"success\");\r\n//     setOpenSnackbar(true);\r\n//     setSelectedItems([]);\r\n//   };\r\n\r\n//   // Handle cancel order\r\n//   const handleCancelOrder = () => {\r\n//     setSnackbarMessage(\"Order canceled.\");\r\n//     setSnackbarSeverity(\"error\");\r\n//     setOpenSnackbar(true);\r\n//     setSelectedItems([]);\r\n//   };\r\n\r\n//   // Get unique categories\r\n//   const categories = [\r\n//     \"All\",\r\n//     ...new Set(data.map((item) => item.category || \"Unknown\")),\r\n//   ];\r\n\r\n//   // Filter data based on search query and selected category\r\n//   const filteredData = data.filter(\r\n//     (item) =>\r\n//       (item.category?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//         \"\") &&\r\n//       (selectedCategory === \"All\" || item.category === selectedCategory)\r\n//   );\r\n\r\n//   // Calculate totals\r\n//   const total = selectedItems.reduce(\r\n//     (sum, item) => sum + item.price * item.quantity,\r\n//     0\r\n//   );\r\n//   const tax = total * 0.1; // 10% tax\r\n//   const discount = total * 0.05; // 5% discount\r\n//   const grossTotal = total + tax - discount;\r\n\r\n//   // Close Snackbar\r\n//   const handleCloseSnackbar = () => {\r\n//     setOpenSnackbar(false);\r\n//   };\r\n\r\n//   return (\r\n//     <ThemeProvider theme={theme}>\r\n//       <Grid container spacing={3} sx={{ padding: \"20px\" }}>\r\n//         <Grid item xs={6}>\r\n//           <Grid container spacing={2}>\r\n//             <Grid item xs={6}>\r\n//               <TextField\r\n//                 label=\"Search by category\"\r\n//                 variant=\"outlined\"\r\n//                 value={searchQuery}\r\n//                 onChange={handleSearchChange}\r\n//                 sx={{\r\n//                   marginBottom: \"20px\",\r\n//                   width: \"100%\",\r\n//                   \"& .MuiOutlinedInput-root\": {\r\n//                     borderRadius: \"20px\",\r\n//                   },\r\n//                 }}\r\n//                 InputProps={{\r\n//                   endAdornment: (\r\n//                     <InputAdornment position=\"end\">\r\n//                       <Search />\r\n//                     </InputAdornment>\r\n//                   ),\r\n//                 }}\r\n//               />\r\n//             </Grid>\r\n//             <Grid item xs={6}>\r\n//               <Select\r\n//                 label=\"Category\"\r\n//                 value={selectedCategory}\r\n//                 onChange={handleCategoryChange}\r\n//                 sx={{\r\n//                   marginBottom: \"20px\",\r\n//                   width: \"100%\",\r\n//                   \"& .MuiSelect-root\": {\r\n//                     borderRadius: \"20px\",\r\n//                   },\r\n//                   \"& fieldset\": {\r\n//                     borderRadius: \"20px\", // Ensures the outline of the Select component is also rounded\r\n//                   },\r\n//                 }}\r\n//               >\r\n//                 {categories.map((category) => (\r\n//                   <MenuItem key={category} value={category}>\r\n//                     {category}\r\n//                   </MenuItem>\r\n//                 ))}\r\n//               </Select>\r\n//             </Grid>\r\n//           </Grid>\r\n\r\n//           <Box\r\n//             sx={{\r\n//               maxHeight: \"400px\",\r\n//               overflowY: \"auto\",\r\n//               paddingRight: \"10px\", // To prevent scroll bar overlap\r\n//             }}\r\n//           >\r\n//             <Grid container spacing={2}>\r\n//               {filteredData.length > 0 ? (\r\n//                 filteredData.map((item) => (\r\n//                   <Grid item xs={3} key={item.id}>\r\n//                     <AnimatedCard onClick={() => handleProductClick(item)}>\r\n//                       <CardContent>\r\n//                         <img\r\n//                           src={item.productImage}\r\n//                           alt={item.createdOn}\r\n//                           height={100}\r\n//                           width={100}\r\n//                           style={{ marginBottom: \"10px\" }}\r\n//                         />\r\n//                         <Typography variant=\"h7\" gutterBottom>\r\n//                           {item.productName.toUpperCase()}\r\n//                         </Typography>\r\n//                         <Typography\r\n//                           variant=\"h6\"\r\n//                           color=\"primary\"\r\n//                           sx={{ position: \"relative\", top: \"-4px\" }}\r\n//                         >\r\n//                           ${item.productPrice}/-\r\n//                         </Typography>\r\n//                       </CardContent>\r\n//                     </AnimatedCard>\r\n//                   </Grid>\r\n//                 ))\r\n//               ) : (\r\n//                 <Typography variant=\"body1\" color=\"textSecondary\">\r\n//                   No products available.\r\n//                 </Typography>\r\n//               )}\r\n//             </Grid>\r\n//           </Box>\r\n//         </Grid>\r\n\r\n//         {/* Selected Items Display Grid */}\r\n//         <Grid item xs={6}>\r\n//           <Typography variant=\"h4\" gutterBottom>\r\n//             Billing....\r\n//           </Typography>\r\n//           <Box\r\n//             sx={{\r\n//               maxHeight: \"300px\",\r\n//               overflowY: \"auto\",\r\n//               paddingRight: \"10px\", // To prevent scroll bar overlap\r\n//             }}\r\n//           >\r\n//             {selectedItems.length > 0 ? (\r\n//               <TableContainer component={Paper}>\r\n//                 <Table>\r\n//                   <TableHead>\r\n//                     <TableRow>\r\n//                       <TableCell\r\n//                         sx={{\r\n//                           backgroundColor: \"primary.main\",\r\n//                           color: \"#fff\",\r\n//                         }}\r\n//                       >\r\n//                         Product Name\r\n//                       </TableCell>\r\n//                       <TableCell\r\n//                         sx={{\r\n//                           backgroundColor: \"primary.main\",\r\n//                           color: \"#fff\",\r\n//                         }}\r\n//                       >\r\n//                         Price\r\n//                       </TableCell>\r\n//                       <TableCell\r\n//                         sx={{\r\n//                           backgroundColor: \"primary.main\",\r\n//                           color: \"#fff\",\r\n//                         }}\r\n//                       >\r\n//                         Quantity\r\n//                       </TableCell>\r\n//                       <TableCell\r\n//                         sx={{\r\n//                           backgroundColor: \"primary.main\",\r\n//                           color: \"#fff\",\r\n//                         }}\r\n//                       >\r\n//                         Actions\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   </TableHead>\r\n//                   <TableBody>\r\n//                     {selectedItems.map((item) => (\r\n//                       <TableRow\r\n//                         key={item.id}\r\n//                         sx={{\r\n//                           transition: \"background-color 0.3s\",\r\n//                           \"&:hover\": { backgroundColor: \"#f5f5f5\" },\r\n//                         }}\r\n//                       >\r\n//                         <TableCell>{item.title.slice(0, 20)}</TableCell>\r\n//                         <TableCell>${item.price.toFixed(2)}</TableCell>\r\n//                         <TableCell>\r\n//                           <IconButton\r\n//                             onClick={() => handleQuantityChange(item.id, -1)}\r\n//                           >\r\n//                             <Remove />\r\n//                           </IconButton>\r\n//                           <span>{item.quantity}</span>\r\n//                           <IconButton\r\n//                             onClick={() => handleQuantityChange(item.id, 1)}\r\n//                           >\r\n//                             <Add />\r\n//                           </IconButton>\r\n//                         </TableCell>\r\n//                         <TableCell>\r\n//                           <IconButton onClick={() => handleDelete(item.id)}>\r\n//                             <Delete style={{ color: \"#ff1a1a\" }} />\r\n//                           </IconButton>\r\n//                         </TableCell>\r\n//                       </TableRow>\r\n//                     ))}\r\n//                   </TableBody>\r\n//                 </Table>\r\n//               </TableContainer>\r\n//             ) : (\r\n//               <Typography variant=\"body1\" color=\"textSecondary\">\r\n//                 No products selected.\r\n//               </Typography>\r\n//             )}\r\n//           </Box>\r\n//           {/* Totals Card */}\r\n//           <Card\r\n//             sx={{\r\n//               marginTop: \"20px\",\r\n//               padding: \"10px\",\r\n//               backgroundColor: \"#f8f9fa\",\r\n//             }}\r\n//           >\r\n//             <CardContent>\r\n//               <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\r\n//                 <Typography variant=\"subtitle1\">\r\n//                   Total: ${total.toFixed(2)}\r\n//                 </Typography>\r\n//                 <Typography variant=\"subtitle1\">\r\n//                   Tax (10%): ${tax.toFixed(2)}\r\n//                 </Typography>\r\n//                 <Typography variant=\"subtitle1\">\r\n//                   Discount (5%): -${discount.toFixed(2)}\r\n//                 </Typography>\r\n//                 <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n//                   Gross Total: ₹{grossTotal.toFixed(2)}/-\r\n//                 </Typography>\r\n//               </Box>\r\n//             </CardContent>\r\n//           </Card>\r\n//           <Box display=\"flex\" justifyContent=\"center\" marginTop=\"10px\">\r\n//             <Button\r\n//               onClick={handlePlaceOrder}\r\n//               variant=\"contained\"\r\n//               color=\"primary\"\r\n//               sx={{ margin: \"5px\" }}\r\n//             >\r\n//               Place Order\r\n//             </Button>\r\n//             <Button\r\n//               onClick={handleCancelOrder}\r\n//               variant=\"contained\"\r\n//               color=\"error\"\r\n//               sx={{ margin: \"5px\" }}\r\n//             >\r\n//               Cancel Order\r\n//             </Button>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n\r\n//       {/* Snackbar for alerts */}\r\n//       <Snackbar\r\n//         open={openSnackbar}\r\n//         autoHideDuration={6000}\r\n//         onClose={handleCloseSnackbar}\r\n//         action={\r\n//           <IconButton\r\n//             size=\"small\"\r\n//             aria-label=\"close\"\r\n//             color=\"inherit\"\r\n//             onClick={handleCloseSnackbar}\r\n//           >\r\n//             <CloseIcon />\r\n//           </IconButton>\r\n//         }\r\n//       >\r\n//         <Alert\r\n//           onClose={handleCloseSnackbar}\r\n//           severity={snackbarSeverity}\r\n//           sx={{ width: \"100%\" }}\r\n//         >\r\n//           {snackbarMessage}\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </ThemeProvider>\r\n//   );\r\n// };\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nexport const Fetching = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = async () => {\r\n    const result = await axios.get(\"\");\r\n    setData(result.data);\r\n  };\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {data.map((item) => {\r\n        return <Grid item xs={3}></Grid>;\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n"],"mappingslD,SAASC,IAAI,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMQ,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,EAAE,CAAC;IAClCJ,OAAO,CAACE,MAAM,CAACH,IAAI,CAAC;EACtB,CAAC;EACDP,SAAS,CAAC,MAAM;IACdS,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAACF,IAAI;IAACW,SAAS;IAACC,OAAO,EAAE,CAAE;IAAAC,QAAA,EACxBR,IAAI,CAACS,GAAG,CAAEC,IAAI,IAAK;MAClB,oBAAOb,OAAA,CAACF,IAAI;QAACe,IAAI;QAACC,EAAE,EAAE;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAClC,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAAChB,EAAA,CAlBWD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}